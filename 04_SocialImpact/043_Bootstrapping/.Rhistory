library(WDI)
WDIdf <- WDI(indicator = c("NY.GDP.PCAP.PP.KD", "SP.POP.TOTL", "IT.NET.USER.ZS"),
start = 2014, end = 2014, extra = TRUE)
newdf <- WDIdf[complete.cases(WDIdf) & WDIdf$region != "Aggregates",]
head(newdf)
GoogleDF <-read.csv("geoMap.csv", skip=2)
names(GoogleDF) <- c("country", "G2013", "G2015")
GoogleDF$G2013 <- as.numeric(sub("%", "", GoogleDF$G2013))
GoogleDF$G2015 <- as.numeric(sub("%", "", GoogleDF$G2015))
GoogleDF$FOI <- GoogleDF$G2015/GoogleDF$G2013
allDF <- merge(GoogleDF, newdf)
head(allDF)
write.csv(allDF, "FOI.RData", row.names=F)
df <- read.csv("FOI.csv")
head(df)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD)
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
library(dplyr)
df <- read.csv("FOI.csv")
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
head(df)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD)
lm(NY.GDP.PCAP.PP.KD~FOI, df)
summary(lm(NY.GDP.PCAP.PP.KD~FOI, df))
library(dplyr)
df <- read.csv("FOI.csv")
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
model <- lm(NY.GDP.PCAP.PP.KD~FOI, df)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
library(dplyr)
df <- read.csv("FOI.csv")
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
model <- lm(NY.GDP.PCAP.PP.KD~FOI, df)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
?segments
library(dplyr)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
segments(df$FOI,model$fitted.values, df$FOI,df$NY.GDP.PCAP.PP.KD, col="red")
library(dplyr)
plot(df$FOI, df$NY.GDP.PCAP.PP.KD, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
segments(df$FOI,model$fitted.values, df$FOI,df$NY.GDP.PCAP.PP.KD, col="darkgreen")
model <- lm(GDP~FOI, df)
library(dplyr)
df <- read.csv("FOI.csv")
df$GDP <- df$NY.GDP.PCAP.PP.KD
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
model <- lm(GDP~FOI, df)
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
library(dplyr)
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
segments(df$FOI,model$fitted.values, df$FOI,df$GDP, col="darkgreen")
model <- lm(GDP~FOI, df)
print(model)
model$coefficients
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
abline(model$coefficients[1], model$coefficients[2], col="red")
head(residuals(model))
mean(residuals(model))
heaD(predict(model))
head(predict(model))
var(df$GDP)
var(residuals(model))
1-var(residuals(model))/var(df$GDP)
names(df)
model2 <- lm(GDP~FOI+SP.POP.TOTL, df)
summary(model2)
model2 <- lm(GDP~FOI+, df)
names(df)
model2 <- lm(GDP~FOI+IT.NET.USER.ZS, df)
summary(model2)
summary(model)$r.squared
cor(df$GDP, df$FOI)^2
cor(df$GDP, predict(model))^2
summary(model)
summary(model2)
cor(predict(model), df$GDP)
cor(residuals(model), df$GDP)
plot(residuals(model), df$GDP)
model <- lm(GDP~FOI, df)
plot(residuals(model), df$GDP)
plot(residuals(model), df$FOI)
plot(residuals(model), predict(model))
hist(residuals(model))
plot(residuals(model), predict(model))
qqnorm(residuals(model))
hist(residuals(model))
hist(residuals(model), breaks=30)
hist(residuals(model), breaks=20)
hist(residuals(model), breaks=10)
plot(predict(model), residuals(model))
plot(predict(model), residuals(model))
DataFrame <- read.csv("NHIS2007.csv")
ObservedHeights <- DataFrame$height
mean(ObservedHeights)
# Height Data from National Health Interview Survey (NHIS) 2007
DataFrame <- read.csv("NHIS2007.csv")
ObservedHeights <- DataFrame$height
mean(ObservedHeights)
BootSample <- sample(ObservedHeights, replace = T)
mean(BootSample)
# obtaining M bootstrap samples and calculate mean value of each bootstrap sample
M <- 10000
r.mean <- numeric(M)
for(i in 1:M)
{
BootSample <- sample(ObservedHeights, replace = T)
r.mean[i] <- mean(BootSample)
}
median(r.mean) # median of the bootstrap samples
sd(r.mean) # standard deviation of the bootstrap samples
hist(r.mean) # plot histogram of the measured means over the boostrap samples
hist(r.mean) # plot histogram of the measured means over the boostrap samples
sd(r.mean) # standard deviation of the bootstrap samples
quantile(r.mean, probs=c(0.025, 0.975))
library(dplyr)
df <- read.csv("FOI.csv")
df$GDP <- df$NY.GDP.PCAP.PP.KD
df %>% filter(SP.POP.TOTL*IT.NET.USER.ZS/100 > 5000000) -> df
model <- lm(GDP~FOI, df)
model$coefficients[2]
BootSample <- sample(nrow(df), replace = T)
BootSample
M <- 10000
bootSlopes <- numeric(M)
for(i in 1:M)
{
BootSample <- sample(nrow(df), replace = T)
bootSlopes[i] <- lm(df$GDP[BootSample] ~ df$FOI[BootSample])$coefficients[2]
}
hist(bootSlopes)
median(bootSlopes)
median(bootSlopes)
sd(bootSlopes)
hist(bootSlopes)
median(bootSlopes)
sd(bootSlopes)
hist(bootSlopes)
median(bootSlopes)
sd(bootSlopes)
hist(bootSlopes)
quantile(bootSlopes, probs = c(0.025, 0.975))
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:M)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.01))
}
# obtaining M bootstrap samples and calculate mean value of each bootstrap sample
M <- 10000
bootSlopes <- numeric(M)
bootIntercepts <- numeric(M)
for(i in 1:M)
{
BootSample <- sample(nrow(df), replace = T)
bootmodel <- lm(df$GDP[BootSample] ~ df$FOI[BootSample])
bootSlopes[i] <- bootmodel$coefficients[2]
bootIntercepts[i] <- bootmodel$coefficients[2]
}
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:M)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.01))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
# obtaining M bootstrap samples and calculate mean value of each bootstrap sample
M <- 10000
bootSlopes <- numeric(M)
bootIntercepts <- numeric(M)
for(i in 1:M)
{
BootSample <- sample(nrow(df), replace = T)
bootmodel <- lm(df$GDP[BootSample] ~ df$FOI[BootSample])
bootSlopes[i] <- bootmodel$coefficients[2]
bootIntercepts[i] <- bootmodel$coefficients[1]
}
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:M)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.01))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:M)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.001))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:M)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.005))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:1000)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.005))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:1000)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.01))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
plot(df$FOI, df$GDP, xlab="FOI", ylab="GDP per capita")
for(i in 1:1000)
{
abline(bootIntercepts[i], bootSlopes[i], col=rgb(1,0,0,0.01))
}
abline(model$coefficients[1], model$coefficients[2], col="red")
## Bootstrapping with 10000 replications
results <- boot(data=as.vector(ObservedHeights), statistic=ReturnMean, R=10000)
library(boot)
ReturnMean <- function(datav, sampleindices)
{
d <- datav[sampleindices] # we will use this for bootstrapping
return( mean(d) )
}
## Bootstrapping with 10000 replications
results <- boot(data=as.vector(ObservedHeights), statistic=ReturnMean, R=10000)
results$t
?boot
